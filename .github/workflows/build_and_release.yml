name: Build and release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Existing tag name to upload artifacts to'
        required: true
        type: string
      targets:
        description: 'JSON array of target platforms to build [{"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu"}, ...]'
        required: true
        type: string
        default: '[{"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu"}, {"os": "ubuntu-latest", "target": "aarch64-unknown-linux-gnu"}, {"os": "macos-latest", "target": "x86_64-apple-darwin"}]'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.targets) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@1.85.0

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            release-build-${{ matrix.target }}-
            release-build-
          save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-on-failure: true

      - name: Setup cross-compilation
        uses: taiki-e/setup-cross-action@v1
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-gnu'

      # Build linux targets by cross, otherwise there may be runtime errors when running on other linux versions:
      # ./ape-dts: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.38' not found (required by ./ape-dts)
      # ./ape-dts: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.38' not found (required by ./ape-dts)
      - name: Cross build
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-gnu'
        run: cross build --release --target=${{ matrix.target }}

      - name: Local build
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --features metrics --target=${{ matrix.target }}

      - name: Create release artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/dt-main artifacts/ape-dts
          cp log4rs.yaml artifacts/log4rs.yaml
          tar -czvf ape-dts-${{ github.run_id }}-${{ matrix.target }}.tar.gz -C artifacts .

      - name: Upload Release Asset
        id: upload_release_asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          files: ape-dts-${{ github.run_id }}-${{ matrix.target }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
